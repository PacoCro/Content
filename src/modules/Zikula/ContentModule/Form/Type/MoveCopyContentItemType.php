<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\Form\Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Zikula\ContentModule\Entity\Factory\EntityFactory;
use Zikula\ContentModule\Entity\PageEntity;
use Zikula\ContentModule\Form\DataTransformer\PageTransformer;
use Zikula\ContentModule\Form\Type\Field\EntityTreeType;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;

/**
 * Content item moving and copying form type implementation class.
 */
class MoveCopyContentItemType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var TranslatorInterface
     */
    private $translator;

    /**
     * @var EntityFactory
     */
    private $entityFactory;

    /**
     * MoveCopyContentItemType constructor.
     *
     * @param TranslatorInterface $translator
     * @param EntityFactory       $entityFactory
     */
    public function __construct(
        TranslatorInterface $translator,
        EntityFactory $entityFactory
    ) {
        $this->setTranslator($translator);
        $this->entityFactory = $entityFactory;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder->add('destinationPage', EntityTreeType::class, [
            'class' => PageEntity::class,
            'multiple' => false,
            'expanded' => false,
            'use_joins' => false,
            'label' => $this->__('Destination page') . ':'
        ]);
        $transformer = new PageTransformer($this->entityFactory);
        $builder->get('destinationPage')->addModelTransformer($transformer);

        $builder->add('operationType', ChoiceType::class, [
            'label' => $this->__('Operation type') . ':',
            'label_attr' => [
                'class' => 'radio-inline'
            ],
            'empty_data' => 'copy',
            'choices' => [
                $this->__('Move') => 'move',
                $this->__('Copy') => 'copy'
            ],
            'multiple' => false,
            'expanded' => true
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function getBlockPrefix()
    {
        return 'zikulacontentmodule_movecopycontentitem';
    }
}
