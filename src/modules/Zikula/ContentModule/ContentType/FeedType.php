<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\ContentType;

use Zikula\ContentModule\AbstractContentType;
use Zikula\ContentModule\ContentTypeInterface;
use Zikula\ContentModule\ContentType\Form\Type\FeedType as FormType;

/**
 * Feed content type.
 */
class FeedType extends AbstractContentType
{
    /**
     * @inheritDoc
     */
    public function getCategory()
    {
        return ContentTypeInterface::CATEGORY_EXTERNAL;
    }

    /**
     * @inheritDoc
     */
    public function getIcon()
    {
        return 'rss-square';
    }

    /**
     * @inheritDoc
     */
    public function getTitle()
    {
        return $this->__('Feed');
    }

    /**
     * @inheritDoc
     */
    public function getDescription()
    {
        return $this->__('Display list of items in an Atom or RSS feed.');
    }

    /**
     * @inheritDoc
     */
    public function getAdminInfo()
    {
        // TODO
        return $this->__('You need to install the SimplePie system plugin in order to activate this plugin.');
    }

    /**
     * @inheritDoc
     */
    public function isActive()
    {
        // check for the availability of the SimplePie systemplugin that provides SimplePie
        // TODO
        return true;
        return false;//PluginUtil::isAvailable(PluginUtil::getServiceId('SystemPlugin_SimplePie_Plugin'));
    }

    /**
     * @inheritDoc
     */
    public function getDefaultData()
    {
        return [
            'url' => '',
            'includeContent' => false,
            'refreshTime' => 60,
            'maxNoOfItems' => 10
        ];
    }

    /**
     * @inheritDoc
     */
    public function getSearchableText()
    {
        return html_entity_decode(strip_tags($this->data['text']));
    }

/** TODO
    function display()
    {
        // call SimplePieFeed that provides SimplePie
        $this->feed = new SimplePieFeed($this->url, $this->refreshTime * 60, System::getVar('temp'));
        $this->feed->init();
        $items = $this->feed->get_items();
        //$items = $this->feed->get_items(0, $this->maxNoOfItems);
        //$theFeed->enable_order_by_date(true);

        $itemsData = array();
        foreach ($items as $item) {
            if (count($itemsData) < $this->maxNoOfItems) {
                $itemsData[] = array(
                    'title' => $this->decode($item->get_title()),
                    'description' => $this->decode($item->get_description()),
                    'permalink' => $item->get_permalink());
            }
        }
        $this->feedData = array(
            'title' => $this->decode($this->feed->get_title()),
            'description' => $this->decode($this->feed->get_description()),
            'permalink' => $this->feed->get_permalink(),
            'items' => $itemsData);

        $this->view->assign('feed', $this->feedData);
        $this->view->assign('includeContent', $this->includeContent);

        return $this->view->fetch($this->getTemplate());
    }

    function displayEditing()
    {
        return "<input value=\"" . DataUtil::formatForDisplay($this->url) . "\" style=\"width: 30em\" readonly=readonly/>";
    }
*/
    /**
     * @inheritDoc
     */
    public function getEditFormClass()
    {
        return FormType::class;
    }

    /**
     * Decodes data from the feed.
     *
     * @param string $string
     * @return string
     */
    private function decode($string)
    {
        return mb_convert_encoding($s, mb_detect_encoding($s), $this->feed->get_encoding());
    }
}
