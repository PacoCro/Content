<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\ContentType;


use \Twig_Environment;
use Symfony\Bundle\TwigBundle\Loader\FilesystemLoader;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerAwareTrait;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ContentModule\AbstractContentType;
use Zikula\ContentModule\ContentTypeInterface;
use Zikula\ContentModule\ContentType\Form\Type\ContentItemType as FormType;
use Zikula\ContentModule\Entity\Factory\EntityFactory;
use Zikula\ContentModule\Helper\PermissionHelper;
use Zikula\ThemeModule\Engine\Asset;

/**
 * Content item content type.
 */
class ContentItemType extends AbstractContentType implements ContainerAwareInterface
{
    use ContainerAwareTrait;

    /**
     * @var EntityFactory
     */
    private $entityFactory;

    /**
     * BlockType constructor.
     *
     * @param TranslatorInterface $translator       Translator service instance
     * @param Twig_Environment    $twig             Twig service instance
     * @param FilesystemLoader    $twigLoader       Twig loader service instance
     * @param PermissionHelper    $permissionHelper PermissionHelper service instance
     * @param Asset               $assetHelper      Asset service instance
     * @param ContainerInterface  $container        Service container
     * @param EntityFactory       $entityFactory    EntityFactory service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        Twig_Environment $twig,
        FilesystemLoader $twigLoader,
        PermissionHelper $permissionHelper,
        Asset $assetHelper,
        ContainerInterface $container,
        EntityFactory $entityFactory
    ) {
        $this->setContainer($container);
        $this->entityFactory = $entityFactory;
        parent::__construct($translator, $twig, $twigLoader, $permissionHelper, $assetHelper);
    }


    /**
     * @inheritDoc
     */
    public function getCategory()
    {
        return ContentTypeInterface::CATEGORY_EXPERT;
    }

    /**
     * @inheritDoc
     */
    public function getIcon()
    {
        return 'link';
    }

    /**
     * @inheritDoc
     */
    public function getTitle()
    {
        return $this->__('Existing content');
    }

    /**
     * @inheritDoc
     */
    public function getDescription()
    {
        return $this->__('Reference and display an already existing content item.');
    }

    /**
     * @inheritDoc
     */
    public function getDefaultData()
    {
        return [
            'contentItemId' => 0
        ];
    }

    /**
     * @inheritDoc
     */
    public function displayView() {
        if ($this->data['contentItemId'] < 1) {
            return '';
        }

        $repository = $this->entityFactory->getRepository('contentItem');
        $contentItem = $repository->selectById($this->data['contentItemId']);
        if (null === $contentItem) {
            return '';
        }

        $contentTypeClass = $contentItem->getOwningType();
        if (!class_exists($contentTypeClass) || !$this->container->has($contentTypeClass)) {
            return '';
        }
        if ($contentTypeClass == get_class($this)) {
            // prevent endless loop
            return '';
        }

        $contentType = $this->container->get($contentTypeClass);
        $contentType->setEntity($contentItem);

        return $contentType->displayView();
    }

    /**
     * @inheritDoc
     */
    public function getEditFormClass()
    {
        return FormType::class;
    }
}
