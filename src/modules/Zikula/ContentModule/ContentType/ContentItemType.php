<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\ContentType;

use RuntimeException;
use Twig\Environment;
use Symfony\Bundle\TwigBundle\Loader\FilesystemLoader;
use Zikula\Common\Content\AbstractContentType;
use Zikula\Common\Content\ContentTypeInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ContentModule\ContentType\Form\Type\ContentItemType as FormType;
use Zikula\ContentModule\Entity\Factory\EntityFactory;
use Zikula\ContentModule\Helper\ContentDisplayHelper;
use Zikula\ContentModule\Helper\PermissionHelper;
use Zikula\ThemeModule\Engine\Asset;

/**
 * Content item content type.
 */
class ContentItemType extends AbstractContentType
{
    /**
     * @var EntityFactory
     */
    protected $entityFactory;

    /**
     * @var ContentDisplayHelper
     */
    protected $displayHelper;

    /**
     * ContentItemType constructor.
     *
     * @param TranslatorInterface $translator
     * @param Environment $twig
     * @param FilesystemLoader $twigLoader
     * @param PermissionHelper $permissionHelper
     * @param Asset $assetHelper
     * @param EntityFactory $entityFactory
     * @param ContentDisplayHelper $displayHelper
     */
    public function __construct(
        TranslatorInterface $translator,
        Environment $twig,
        FilesystemLoader $twigLoader,
        PermissionHelper $permissionHelper,
        Asset $assetHelper,
        EntityFactory $entityFactory,
        ContentDisplayHelper $displayHelper
    ) {
        $this->entityFactory = $entityFactory;
        $this->displayHelper = $displayHelper;
        parent::__construct($translator, $twig, $twigLoader, $permissionHelper, $assetHelper);
    }

    /**
     * @inheritDoc
     */
    public function getCategory()
    {
        return ContentTypeInterface::CATEGORY_EXPERT;
    }

    /**
     * @inheritDoc
     */
    public function getIcon()
    {
        return 'link';
    }

    /**
     * @inheritDoc
     */
    public function getTitle()
    {
        return $this->__('Existing content');
    }

    /**
     * @inheritDoc
     */
    public function getDescription()
    {
        return $this->__('Reference and display an already existing content item.');
    }

    /**
     * @inheritDoc
     */
    public function getDefaultData()
    {
        return [
            'contentItemId' => 0
        ];
    }

    /**
     * @inheritDoc
     */
    public function displayView()
    {
        if ($this->data['contentItemId'] < 1) {
            return '';
        }

        $repository = $this->entityFactory->getRepository('contentItem');
        $contentItem = $repository->selectById($this->data['contentItemId']);
        if (null === $contentItem) {
            return '';
        }

        try {
            $contentType = $this->displayHelper->initContentType($contentItem);
        } catch (RuntimeException $exception) {
            return '';
        }

        return $contentType->displayView();
    }

    /**
     * @inheritDoc
     */
    public function getEditFormClass()
    {
        return FormType::class;
    }
}
