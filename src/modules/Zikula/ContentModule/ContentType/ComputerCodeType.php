<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\ContentType;

use \Twig_Environment;
use Symfony\Bundle\TwigBundle\Loader\FilesystemLoader;
use Zikula\Bundle\CoreBundle\HttpKernel\ZikulaHttpKernelInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ContentModule\AbstractContentType;
use Zikula\ContentModule\ContentTypeInterface;
use Zikula\ContentModule\ContentType\Form\Type\ComputerCodeType as FormType;
use Zikula\ContentModule\Helper\PermissionHelper;
use Zikula\ThemeModule\Engine\Asset;

/**
 * Computer code content type.
 */
class ComputerCodeType extends AbstractContentType
{
    /**
     * @var ZikulaHttpKernelInterface
     */
    protected $kernel;

    /**
     * ComputerCodeType constructor.
     *
     * @param TranslatorInterface       $translator       Translator service instance
     * @param Twig_Environment          $twig             Twig service instance
     * @param FilesystemLoader          $twigLoader       Twig loader service instance
     * @param PermissionHelper          $permissionHelper PermissionHelper service instance
     * @param Asset                     $assetHelper      Asset service instance
     * @param ZikulaHttpKernelInterface $kernel           Kernel service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        Twig_Environment $twig,
        FilesystemLoader $twigLoader,
        PermissionHelper $permissionHelper,
        Asset $assetHelper,
        ZikulaHttpKernelInterface $kernel
    ) {
        $this->kernel = $kernel;
        parent::__construct($translator, $twig, $twigLoader, $permissionHelper, $assetHelper);
    }

    /**
     * @inheritDoc
     */
    public function getCategory()
    {
        return ContentTypeInterface::CATEGORY_BASIC;
    }

    /**
     * @inheritDoc
     */
    public function getIcon()
    {
        return 'code';
    }

    /**
     * @inheritDoc
     */
    public function getTitle()
    {
        return $this->__('Computer code');
    }

    /**
     * @inheritDoc
     */
    public function getDescription()
    {
        return $this->__('A text editor for computer code. Line numbers are added to the text and it is displayed in a monospaced font.');
    }

    /**
     * @inheritDoc
     */
    public function getDefaultData()
    {
        return [
            'text' => '',
            'codeFilter' => 'native'
        ];
    }

    /**
     * @inheritDoc
     */
    public function getSearchableText()
    {
        return html_entity_decode(strip_tags($this->data['text']));
    }

    /**
     * @inheritDoc
     */
    public function displayView()
    {
        $this->data['formattedText'] = '';

        $unformattedText = $this->data['text'];
        if ('bbcode' == $this->data['codeFilter'] && $this->kernel->isBundle('ZikulaBBCodeModule')) {
            $this->data['formattedText'] = $this->transformCode($unformattedText);
            /* @todo update as soon as the BBCode module has been migrated to Zikula 2
            $code = '[code]' . $unformattedText . '[/code]';
            PageUtil::addVar('stylesheet', 'modules/BBCode/style/style.css');
            $this->data['formattedText'] = ModUtil::apiFunc('BBCode', 'User', 'transform', array('message' => $code));
            */
        } elseif ('lumicula' == $this->data['codeFilter'] && $this->kernel->isBundle('PhaidonLuMicuLaModule')) {
            $this->data['formattedText'] = $this->transformCode($unformattedText);
            /* @todo update as soon as the LuMicuLa module has been migrated to Zikula 2
            */
        } else {
            $this->data['formattedText'] = $this->transformCode($unformattedText);
        }

        return parent::displayView();
    }

    /**
     * @inheritDoc
     */
    public function getEditFormClass()
    {
        return FormType::class;
    }

    /**
     * Processes the code.
     *
     * @param string $code
     * @return string
     */
    protected function transformCode($code)
    {
        $lines = explode("\n", $code);
        $html = "<ol class=\"codelisting\">\n";

        for ($i = 1, $amountOfLines = count($lines); $i <= $amountOfLines; ++$i) {
            $line = empty($lines[$i - 1]) ? ' ' : htmlspecialchars($lines[$i - 1]);
            $line = '<div><pre>' . $line . '</pre></div>';
            $html .= "<li>$line</li>\n";
        }

        $html .= "</ol>\n";

        return $html;
    }
}
