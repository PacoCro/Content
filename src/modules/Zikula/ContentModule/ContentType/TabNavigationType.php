<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\ContentType;

use RuntimeException;
use Twig\Environment;
use Symfony\Bundle\TwigBundle\Loader\FilesystemLoader;
use Symfony\Component\HttpFoundation\RequestStack;
use Zikula\Common\Content\AbstractContentType;
use Zikula\Common\Content\ContentTypeInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ContentModule\ContentType\Form\Type\TabNavigationType as FormType;
use Zikula\ContentModule\Entity\Factory\EntityFactory;
use Zikula\ContentModule\Helper\ContentDisplayHelper;
use Zikula\ContentModule\Helper\PermissionHelper;
use Zikula\ThemeModule\Engine\Asset;

/**
 * Tab navigation content type.
 */
class TabNavigationType extends AbstractContentType
{
    /**
     * @var RequestStack
     */
    protected $requestStack;

    /**
     * @var EntityFactory
     */
    protected $entityFactory;

    /**
     * @var ContentDisplayHelper
     */
    protected $displayHelper;

    /**
     * TabNavigationType constructor.
     *
     * @param TranslatorInterface $translator
     * @param Environment $twig
     * @param FilesystemLoader $twigLoader
     * @param PermissionHelper $permissionHelper
     * @param Asset $assetHelper
     * @param RequestStack $requestStack
     * @param EntityFactory $entityFactory
     * @param ContentDisplayHelper $displayHelper
     */
    public function __construct(
        TranslatorInterface $translator,
        Environment $twig,
        FilesystemLoader $twigLoader,
        PermissionHelper $permissionHelper,
        Asset $assetHelper,
        RequestStack $requestStack,
        EntityFactory $entityFactory,
        ContentDisplayHelper $displayHelper
    ) {
        $this->requestStack = $requestStack;
        $this->entityFactory = $entityFactory;
        $this->displayHelper = $displayHelper;
        parent::__construct($translator, $twig, $twigLoader, $permissionHelper, $assetHelper);
    }

    /**
     * @inheritDoc
     */
    public function getCategory()
    {
        return ContentTypeInterface::CATEGORY_EXPERT;
    }

    /**
     * @inheritDoc
     */
    public function getIcon()
    {
        return 'columns';
    }

    /**
     * @inheritDoc
     */
    public function getTitle()
    {
        return $this->__('Tab navigation');
    }

    /**
     * @inheritDoc
     */
    public function getDescription()
    {
        return $this->__('Tab navigation with existing Content items.');
    }

    /**
     * @inheritDoc
     */
    public function getDefaultData()
    {
        return [
            'contentItemIds' => '',
            'tabTitles' => '',
            'tabLinks' => '',
            'tabType' => '',
            'tabStyle' => ''
        ];
    }

    /**
     * @inheritDoc
     */
    public function displayView()
    {
        // Convert the variables into arrays
        $contentItemIds = explode(';', str_replace(' ', '', $this->data['contentItemIds']));
        $tabTitles = explode(';', $this->data['tabTitles']);
        $tabLinks = explode(';', str_replace(' ', '', $this->data['tabLinks']));
        if (!count($contentItemIds)) {
            return '';
        }
        if (count($contentItemIds) != count($tabTitles) || count($contentItemIds) != count($tabLinks)) {
            return '';
        }

        $repository = $this->entityFactory->getRepository('contentItem');

        // set session flag to allow selection of inactive content items, too
        $this->requestStack->getMasterRequest()->getSession()->set('ContentAllowInactiveElements', 1);

        // Make an array with output display of the content items to tab
        $itemsToTab = [];
        foreach ($contentItemIds as $key => $contentItemId) {
            $contentItem = $repository->selectById($contentItemId);
            if (null === $contentItem) {
                continue;
            }

            try {
                $contentType = $this->displayHelper->initContentType($contentItem);
                $itemsToTab[] = [
                    'display' => $contentType->display(false),//displayView(),
                    'title' => $tabTitles[$key],
                    'link' => isset($tabLinks[$key]) ? $tabLinks[$key] : $key
                ];
            } catch (RuntimeException $exception) {
                // ignore
            }
        }

        $this->requestStack->getMasterRequest()->getSession()->remove('ContentAllowInactiveElements');

        if (!count($itemsToTab)) {
            return '';
        }

        $this->data['itemsToTab'] = $itemsToTab;

        return parent::displayView();
    }

    /**
     * @inheritDoc
     */
    public function getEditFormClass()
    {
        return FormType::class;
    }
}
