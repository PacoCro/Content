<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <vorstand@zikula.de>.
 * @link https://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\ContentType;

use \Twig_Environment;
use Symfony\Bundle\TwigBundle\Loader\FilesystemLoader;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ContentModule\AbstractContentType;
use Zikula\ContentModule\ContentTypeInterface;
use Zikula\ContentModule\ContentType\Form\Type\UnfilteredType as FormType;

/**
 * Unfiltered raw content type.
 */
class UnfilteredType extends AbstractContentType
{
    /**
     * @var boolean
     */
    protected $enableRawPlugin;

    /**
     * UnfilteredType constructor.
     *
     * @param TranslatorInterface $translator      Translator service instance
     * @param Twig_Environment    $twig            Twig service instance
     * @param FilesystemLoader    $twigLoader      Twig loader service instance
     * @param boolean             $enableRawPlugin Whether to enable the unfiltered raw plugin or not
     */
    public function __construct(
        TranslatorInterface $translator,
        Twig_Environment $twig,
        FilesystemLoader $twigLoader,
        $enableRawPlugin
    ) {
        $this->enableRawPlugin = $enableRawPlugin;
        parent::__construct($translator, $twig, $twigLoader);
    }

    /**
     * @inheritDoc
     */
    public function getCategory()
    {
        return ContentTypeInterface::CATEGORY_EXPERT;
    }

    /**
     * @inheritDoc
     */
    public function getIcon()
    {
        return 'user-secret';
    }

    /**
     * @inheritDoc
     */
    function getTitle()
    {
        return $this->__('Unfiltered raw text');
    }

    /**
     * @inheritDoc
     */
    function getDescription()
    {
        return $this->__('A plugin for unfiltered raw output (iframes, JavaScript, banners, etc).');
    }

    /**
     * @inheritDoc
     */
    public function getAdminInfo()
    {
        return $this->__('You need to explicitly enable a checkbox in the configuration form to activate this plugin.');
    }

    /**
     * @inheritDoc
     */
    public function isActive()
    {
        // Only active when the admin has enabled this plugin
        return $this->enableRawPlugin;
    }

    /**
     * @inheritDoc
     */
    function isTranslatable()
    {
        return true;
    }

    /**
     * @inheritDoc
     */
    public function getDefaultData()
    {
        return [
            'text' => $this->__('Add unfiltered text here ...'),
            'useiframe' => false,
            'iframeSrc' => '',
            'iframeName' => '',
            'iframeTitle' => '',
            'iframeStyle' => 'border:0',
            'iframeWidth' => 800,
            'iframeHeight' => 600,
            'iframeBorder' => 0,
            'iframeScrolling' => 'no',
            'iframeAllowTransparancy' => true
        ];
    }

/** TODO
    function displayEditing()
    {
        $output = '<div style="background-color: Lavender; padding: 10px">';
        if ($this->useiframe) {
            $output .= $this->__f('An <strong>iframe</strong> is included with<br />src = %1$s<br />width = %2$s and height = %3$s', array($this->iframesrc, $this->iframewidth, $this->iframeheight));
        } else {
            $output .= $this->__f('The following <strong>unfiltered text</strong> will be included literally<br />%s', DataUtil::formatForDisplay($this->text));
        }
        $output .= '</div>';

        return $output;
    }
*/
    /**
     * @inheritDoc
     */
    public function getEditFormClass()
    {
        return FormType::class;
    }
}
