<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\ContentType;

use \Twig_Environment;
use Symfony\Bundle\TwigBundle\Loader\FilesystemLoader;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ContentModule\AbstractContentType;
use Zikula\ContentModule\ContentTypeInterface;
use Zikula\ContentModule\ContentType\Form\Type\SlideshareType as FormType;
use Zikula\ContentModule\Helper\CacheHelper;
use Zikula\ContentModule\Helper\PermissionHelper;
use Zikula\ThemeModule\Engine\Asset;

/**
 * Slideshare content type.
 */
class SlideshareType extends AbstractContentType
{
    /**
     * @var CacheHelper
     */
    protected $cacheHelper;

    /**
     * SlideshareType constructor.
     *
     * @param TranslatorInterface $translator       Translator service instance
     * @param Twig_Environment    $twig             Twig service instance
     * @param FilesystemLoader    $twigLoader       Twig loader service instance
     * @param PermissionHelper    $permissionHelper PermissionHelper service instance
     * @param Asset               $assetHelper      Asset service instance
     * @param CacheHelper         $cacheHelper      CacheHelper service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        Twig_Environment $twig,
        FilesystemLoader $twigLoader,
        PermissionHelper $permissionHelper,
        Asset $assetHelper,
        CacheHelper $cacheHelper
    ) {
        $this->cacheHelper = $cacheHelper;
        parent::__construct($translator, $twig, $twigLoader, $permissionHelper, $assetHelper);
    }

    /**
     * @inheritDoc
     */
    public function getCategory()
    {
        return ContentTypeInterface::CATEGORY_EXTERNAL;
    }

    /**
     * @inheritDoc
     */
    public function getIcon()
    {
        return 'slideshare';
    }

    /**
     * @inheritDoc
     */
    public function getTitle()
    {
        return $this->__('Slideshare');
    }

    /**
     * @inheritDoc
     */
    public function getDescription()
    {
        return $this->__('Display slides from slideshare.com.');
    }

    /**
     * @inheritDoc
     */
    public function getDefaultData()
    {
        return [
            'url' => '',
            'text' => '',
            'width' => 599,
            'height' => 487
        ];
    }

    /**
     * @inheritDoc
     */
    public function getSearchableText()
    {
        return html_entity_decode(strip_tags($this->data['text']));
    }

    /**
     * @inheritDoc
     */
    public function displayView()
    {
        $this->data['slideUrl'] = '';
        $this->data['details'] = '';

        if ('' != $this->data['url']) {
            $content = $this->cacheHelper->fetch('https://www.slideshare.net/api/oembed/2?url=' . $this->data['url'] . '&format=json');
            if (false !== $content) {
                $this->data['details'] = @json_decode($content, true);
                // see https://www.beliefmedia.com.au/slideshare-wordpress
                /* Since building new embed code (due scaling), we'll snatch embed URL */
                $html = $this->data['details']['html'];
                $regex = '$\b(https?)://[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|]$i';
                preg_match_all($regex, $html, $result);
                $fullUrl = '';
                if (isset($result['0']['0'])) {
                    $fullUrl = $result['0']['0'];
                }
                $this->data['slideUrl'] = $fullUrl;
            }
        }

        return parent::displayView();
    }

    /**
     * @inheritDoc
     */
    public function getEditFormClass()
    {
        return FormType::class;
    }
}
