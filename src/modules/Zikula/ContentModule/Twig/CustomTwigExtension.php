<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\Twig;

use Doctrine\DBAL\Driver\Connection;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\Routing\RouterInterface;
use Twig_Extension;
use Zikula\CategoriesModule\Entity\RepositoryInterface\CategoryRepositoryInterface;
use Zikula\ContentModule\Collector\ContentTypeCollector;
use Zikula\ContentModule\Entity\Factory\EntityFactory;
use Zikula\ContentModule\Entity\PageEntity;
use Zikula\ContentModule\Helper\CategoryHelper;
use Zikula\ContentModule\Helper\ContentDisplayHelper;

/**
 * Twig extension implementation class.
 */
class CustomTwigExtension extends Twig_Extension
{
    /**
     * @var Connection
     */
    protected $databaseConnection;

    /**
     * @var RequestStack
     */
    protected $requestStack;

    /**
     * @var RouterInterface
     */
    protected $router;

    /**
     * @var ContentTypeCollector
     */
    protected $collector;

    /**
     * @var ContentDisplayHelper
     */
    protected $displayHelper;

    /**
     * @var CategoryHelper
     */
    protected $categoryHelper;

    /**
     * @var CategoryRepositoryInterface
     */
    protected $categoryRepository;

    /**
     * @var EntityFactory
     */
    protected $entityFactory;

    /**
     * @var boolean
     */
    protected $countPageViews;

    /**
     * CustomTwigExtension constructor.
     *
     * @param Connection                  $connection
     * @param RequestStack                $requestStack
     * @param Routerinterface             $router
     * @param ContentTypeCollector        $collector
     * @param ContentDisplayHelper        $displayHelper
     * @param CategoryHelper              $categoryHelper
     * @param CategoryRepositoryInterface $categoryRepository
     * @param EntityFactory               $entityFactory
     * @param boolean                     $countPageViews
     */
    public function __construct(
        Connection $connection,
        RequestStack $requestStack,
        RouterInterface $router,
        ContentTypeCollector $collector,
        ContentDisplayHelper $displayHelper,
        CategoryHelper $categoryHelper,
        CategoryRepositoryInterface $categoryRepository,
        EntityFactory $entityFactory,
        $countPageViews
    ) {
        $this->databaseConnection = $connection;
        $this->requestStack = $requestStack;
        $this->router = $router;
        $this->collector = $collector;
        $this->displayHelper = $displayHelper;
        $this->categoryHelper = $categoryHelper;
        $this->categoryRepository = $categoryRepository;
        $this->entityFactory = $entityFactory;
        $this->countPageViews = $countPageViews;
    }

    /**
     * Returns a list of custom Twig functions.
     *
     * @return \Twig_SimpleFunction[] List of functions
     */
    public function getFunctions()
    {
        return [
            new \Twig_SimpleFunction('zikulacontentmodule_getPagePath', [$this, 'getPagePath'], ['is_safe' => ['html']]),
            new \Twig_SimpleFunction('zikulacontentmodule_contentTypes', [$this, 'getContentTypes']),
            new \Twig_SimpleFunction('zikulacontentmodule_contentDetails', [$this, 'getContentDetails']),
            new \Twig_SimpleFunction('zikulacontentmodule_categoryInfo', [$this, 'getCategoryInfo']),
            new \Twig_SimpleFunction('zikulacontentmodule_increaseAmountOfPageViews', [$this, 'increaseAmountOfPageViews'])
        ];
    }

    /**
     * The zikulacontentmodule_getPagePath function returns a breadcrumb style
     * list of pages.
     * Examples:
     *    {{ zikulacontentmodule_getPagePath(myPage) }}
     *
     * @param PageEntity|array $page
     * @param boolean $linkPages
     *
     * @return string
     */
    public function getPagePath($page, $linkPages = true)
    {
        $pages = [];

        $currentPage = $page;
        $pages[] = $currentPage;
        while (null !== $currentPage['parent']) {
            $currentPage = $currentPage['parent'];
            //if ($currentPage->getLvl() > 0) {
                array_unshift($pages, $currentPage);
            //}
        }

        $output = '<ol class="breadcrumb">';
        foreach ($pages as $aPage) {
            $content = $aPage['title'];
            if (true === $linkPages) {
                $link = $this->router->generate('zikulacontentmodule_page_display', ['slug' => $aPage['slug']]);
                $content = '<a href="' . $link . '" title="' . str_replace('"', '', $content) . '">' . $content . '</a>';
            }
            $output .= '<li' . ($aPage == $page ? ' class="active"' : '') . '>' . $content . '</li>';
        }
        $output .= '</ol>';

        return $output;
    }

    /**
     * The zikulacontentmodule_contentTypes function returns a list of all content types.
     * Examples:
     *    {% set contentTypes = zikulacontentmodule_contentTypes() %}     {# only active ones #}
     *    {% set contentTypes = zikulacontentmodule_contentTypes(true) %} {# also inactive ones #}
     *
     * @param boolean $includeInactive Whether also inactive content types should be returned or not (default false)
     *
     * @return array
     */
    public function getContentTypes($includeInactive = false)
    {
        if (true === $includeInactive) {
            return $this->collector->getAll();
        }

        return $this->collector->getActive();
    }

    /**
     * The zikulacontentmodule_contentDetails function returns all required details
     * for displaying content items of a given page.
     * Examples:
     *    {% set contentElements = zikulacontentmodule_contentDetails(page) %}
     *
     * @return array
     */
    public function getContentDetails(PageEntity $page)
    {
        $contentElements = [];
        foreach ($page->getContentItems() as $contentItem) {
            $contentElements[$contentItem->getId()] = $this->displayHelper->getDetailsForDisplayView($contentItem);
        }

        return $contentElements;
    }

    /**
     * The zikulacontentmodule_categoryInfo function returns all main categories
     * together with the amount of included pages.
     * Examples:
     *    {% set categoryInfoPerRegistry = zikulacontentmodule_categoryInfo() %}
     *
     * @return array
     */
    public function getCategoryInfo()
    {
        $properties = $this->categoryHelper->getAllPropertiesWithMainCat('page');
        if (!count($properties)) {
            return [];
        }

        $categoryInfoPerRegistry = [];
        $locale = $this->requestStack->getCurrentRequest()->getLocale();
        $pageRepository = $this->entityFactory->getRepository('page');

        foreach ($properties as $categoryId) {
            $baseCategory = $this->categoryRepository->find($categoryId);
            if (null === $baseCategory) {
                continue;
            }
            $registryLabel = isset($baseCategory['display_name'][$locale]) ? $baseCategory['display_name'][$locale] : $baseCategory['display_name']['en'];

            $categories = $baseCategory->getChildren();
            $pageCounts = [];
            foreach ($categories as $category) {
                $qb = $pageRepository->getCountQuery('', true);
                $qb->andWhere('tblCategories.category = :category')
                    ->setParameter('category', $category->getId());
                $pageCount = $qb->getQuery()->getSingleScalarResult();
                $pageCounts[$category->getId()] = $pageCount;
            }

            $categoryInfoPerRegistry[$registryLabel] = [
                'categories' => $categories,
                'pageCounts' => $pageCounts
            ];
        }

        return $categoryInfoPerRegistry;
    }

    /**
     * The zikulacontentmodule_increaseAmountOfPageViews function increases the view counter of a specific page.
     * It uses Doctrine DBAL to avoid creating a new page version.
     * Examples:
     *    {{ zikulacontentmodule_increaseAmountOfPageViews(page) }}
     *
     * @param PageEntity $page The given page instance
     */
    public function increaseAmountOfPageViews(PageEntity $page)
    {
        if (!$this->countPageViews) {
            return;
        }

        $pageId = $page->getId();

        // check against session to see if user was already counted
        $request = $this->requestStack->getCurrentRequest();
        $doCount = true;
        if (null !== $request) {
            if ($request->getSession()->has('ContentReadPage' . $pageId)) {
                $doCount = false;
            } else {
                $request->getSession()->set('ContentReadPage' . $pageId, 1);
            }
        }
        if (!$doCount) {
            return;
        }

        $views = $page->getViews() + 1;

        $this->databaseConnection->update('zikula_content_page', ['views' => $views], ['id' => $pageId]);
    }
}
