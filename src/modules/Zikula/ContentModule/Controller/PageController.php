<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <vorstand@zikula.de>.
 * @link https://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\Controller;

use Zikula\ContentModule\Controller\Base\AbstractPageController;

use RuntimeException;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Zikula\ThemeModule\Engine\Annotation\Theme;
use Zikula\ContentModule\Entity\PageEntity;

/**
 * Page controller class providing navigation and interaction functionality.
 */
class PageController extends AbstractPageController
{
    /**
     * @inheritDoc
     *
     * @Route("/admin/pages",
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function adminIndexAction(Request $request)
    {
        return parent::adminIndexAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/pages",
     *        methods = {"GET"}
     * )
     *
     * @param Request $request Current request instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function indexAction(Request $request)
    {
        return parent::indexAction($request);
    }
    /**
     * @inheritDoc
     *
     * @Route("/admin/pages/view/{sort}/{sortdir}/{pos}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "pos" = "\d+", "num" = "\d+", "_format" = "html|csv|rss|atom|xml|json|pdf"},
     *        defaults = {"sort" = "", "sortdir" = "asc", "pos" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     * @param string $sort         Sorting field
     * @param string $sortdir      Sorting direction
     * @param int    $pos          Current pager position
     * @param int    $num          Amount of entries to display
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function adminViewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return parent::adminViewAction($request, $sort, $sortdir, $pos, $num);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/pages/view/{sort}/{sortdir}/{pos}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "pos" = "\d+", "num" = "\d+", "_format" = "html|csv|rss|atom|xml|json|pdf"},
     *        defaults = {"sort" = "", "sortdir" = "asc", "pos" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     *
     * @param Request $request Current request instance
     * @param string $sort         Sorting field
     * @param string $sortdir      Sorting direction
     * @param int    $pos          Current pager position
     * @param int    $num          Amount of entries to display
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function viewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return parent::viewAction($request, $sort, $sortdir, $pos, $num);
    }
    /**
     * @inheritDoc
     *
     * @Route("/admin/page/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"},
     *        options={"expose"=true}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by form handler if page to be edited isn't found
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available)
     */
    public function adminEditAction(Request $request)
    {
        return parent::adminEditAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/page/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"},
     *        options={"expose"=true}
     * )
     *
     * @param Request $request Current request instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by form handler if page to be edited isn't found
     * @throws RuntimeException      Thrown if another critical error occurs (e.g. workflow actions not available)
     */
    public function editAction(Request $request)
    {
        return parent::editAction($request);
    }
    /**
     * Displays a deleted page.
     *
     * @Route("/admin/page/deleted/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     * @param integer $id      Identifier of entity
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown if page to be displayed isn't found
     */
    public function adminDisplayDeletedAction(Request $request, $id = 0)
    {
        $page = $this->restoreDeletedEntity($id);
    
        $undelete = $request->query->getInt('undelete', 0);
        if ($undelete == 1) {
            try {
                $em = $this->get('doctrine.entitymanager');
                $metadata = $em->getClassMetaData(get_class($page));
                $metadata->setIdGeneratorType(\Doctrine\ORM\Mapping\ClassMetadata::GENERATOR_TYPE_NONE);
                $metadata->setIdGenerator(new \Doctrine\ORM\Id\AssignedGenerator());
    
                $versionField = $metadata->versionField;
                $metadata->setVersioned(false);
                $metadata->setVersionField(null);
    
                $em->persist($page);
                $em->flush($page);
    
                $this->addFlash('status', $this->__('Done! Undeleted page.'));
    
                $metadata->setVersioned(true);
                $metadata->setVersionField($versionField);
            } catch (\Exception $exception) {
                $this->addFlash('error', $this->__f('Sorry, but an error occured during the %action% action. Please apply the changes again!', ['%action%' => 'undelete']) . '  ' . $exception->getMessage());
            }
    
            $request->query->set('id', $page->getId());
            $request->query->remove('undelete');
    
            return $this->redirectToRoute('zikulacontentmodule_page_admindisplay', $request->query->all());
        }
    
        return parent::adminDisplayAction($request, $page);
    }
    
    /**
     * Displays a deleted page.
     *
     * @Route("/page/deleted/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET"}
     * )
     *
     * @param Request $request Current request instance
     * @param integer $id      Identifier of entity
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown if page to be displayed isn't found
     */
    public function displayDeletedAction(Request $request, $id = 0)
    {
        $page = $this->restoreDeletedEntity($id);
    
        $undelete = $request->query->getInt('undelete', 0);
        if ($undelete == 1) {
            try {
                $em = $this->get('doctrine.entitymanager');
                $metadata = $em->getClassMetaData(get_class($page));
                $metadata->setIdGeneratorType(\Doctrine\ORM\Mapping\ClassMetadata::GENERATOR_TYPE_NONE);
                $metadata->setIdGenerator(new \Doctrine\ORM\Id\AssignedGenerator());
    
                $versionField = $metadata->versionField;
                $metadata->setVersioned(false);
                $metadata->setVersionField(null);
    
                $em->persist($page);
                $em->flush($page);
    
                $this->addFlash('status', $this->__('Done! Undeleted page.'));
    
                $metadata->setVersioned(true);
                $metadata->setVersionField($versionField);
            } catch (\Exception $exception) {
                $this->addFlash('error', $this->__f('Sorry, but an error occured during the %action% action. Please apply the changes again!', ['%action%' => 'undelete']) . '  ' . $exception->getMessage());
            }
    
            $request->query->set('id', $page->getId());
            $request->query->remove('undelete');
    
            return $this->redirectToRoute('zikulacontentmodule_page_display', $request->query->all());
        }
    
        return parent::displayAction($request, $page);
    }
    
    /**
     * Resets a deleted page back to the last version before it's deletion.
     *
     * @return PageEntity The restored entity
     *
     * @throws NotFoundHttpException Thrown if page isn't found
     */
    protected function restoreDeletedEntity($id = 0)
    {
        if (!$id) {
            throw new NotFoundHttpException($this->__('No such page found.'));
        }
    
        $entityFactory = $this->get('zikula_content_module.entity_factory');
        $page = $entityFactory->createPage();
        $page->setId($id);
        $entityManager = $entityFactory->getObjectManager();
        $logEntriesRepository = $entityManager->getRepository('ZikulaContentModule:PageLogEntryEntity');
        $logEntries = $logEntriesRepository->getLogEntries($page);
        $lastVersionBeforeDeletion = null;
        foreach ($logEntries as $logEntry) {
            if ($logEntry->getAction() != 'remove') {
                $lastVersionBeforeDeletion = $logEntry->getVersion();
                break;
            }
        }
        if (null === $lastVersionBeforeDeletion) {
            throw new NotFoundHttpException($this->__('No such page found.'));
        }
    
        $logEntriesRepository->revert($page, $lastVersionBeforeDeletion);
        $page->setCurrentVersion($lastVersionBeforeDeletion + 2);
    
        return $page;
    }
    /**
     * @inheritDoc
     *
     * @Route("/admin/page/{slug}.{_format}",
     *        requirements = {"slug" = "[^/.]+", "_format" = "html|xml|json|ics|pdf"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET"},
     *        options={"expose"=true}
     * )
     * @ParamConverter("page", class="ZikulaContentModule:PageEntity", options = {"repository_method" = "selectBySlug", "mapping": {"slug": "slugTitle"}, "map_method_signature" = true})
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     * @param PageEntity $page Treated page instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by param converter if page to be displayed isn't found
     */
    public function adminDisplayAction(Request $request, PageEntity $page)
    {
        return parent::adminDisplayAction($request, $page);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/page/{slug}.{_format}",
     *        requirements = {"slug" = "[^/.]+", "_format" = "html|xml|json|ics|pdf"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET"},
     *        options={"expose"=true}
     * )
     * @ParamConverter("page", class="ZikulaContentModule:PageEntity", options = {"repository_method" = "selectBySlug", "mapping": {"slug": "slugTitle"}, "map_method_signature" = true})
     *
     * @param Request $request Current request instance
     * @param PageEntity $page Treated page instance
     *
     * @return Response Output
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     * @throws NotFoundHttpException Thrown by param converter if page to be displayed isn't found
     */
    public function displayAction(Request $request, PageEntity $page)
    {
        return parent::displayAction($request, $page);
    }

    /**
     * Process status changes for multiple items.
     *
     * This function processes the items selected in the admin view page.
     * Multiple items may have their state changed or be deleted.
     *
     * @Route("/admin/pages/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     *
     * @return RedirectResponse
     *
     * @throws RuntimeException Thrown if executing the workflow action fails
     */
    public function adminHandleSelectedEntriesAction(Request $request)
    {
        return parent::adminHandleSelectedEntriesAction($request);
    }
    
    /**
     * Process status changes for multiple items.
     *
     * This function processes the items selected in the admin view page.
     * Multiple items may have their state changed or be deleted.
     *
     * @Route("/pages/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     *
     * @param Request $request Current request instance
     *
     * @return RedirectResponse
     *
     * @throws RuntimeException Thrown if executing the workflow action fails
     */
    public function handleSelectedEntriesAction(Request $request)
    {
        return parent::handleSelectedEntriesAction($request);
    }

    /**
     * This method provides a change history for a given page.
     *
     * @Route("/admin/page/history/{slug}",
     *        requirements = {"slug" = "[^/.]+"},
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     *
     * @param Request $request Current request instance
     * @param integer $slug    Identifier of page
     *
     * @return Response Output
     *
     * @throws NotFoundHttpException Thrown if invalid identifier is given or the page isn't found
     */
    public function adminLoggableHistoryAction(Request $request, $slug = '')
    {
        return parent::adminLoggableHistoryAction($request, $slug);
    }
    
    /**
     * This method provides a change history for a given page.
     *
     * @Route("/page/history/{slug}",
     *        requirements = {"slug" = "[^/.]+"},
     *        methods = {"GET"}
     * )
     *
     * @param Request $request Current request instance
     * @param integer $slug    Identifier of page
     *
     * @return Response Output
     *
     * @throws NotFoundHttpException Thrown if invalid identifier is given or the page isn't found
     */
    public function loggableHistoryAction(Request $request, $slug = '')
    {
        return parent::loggableHistoryAction($request, $slug);
    }

    // feel free to add your own controller methods here
}
