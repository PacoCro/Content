<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\Helper;

use Zikula\ContentModule\Entity\PageEntity;
use Zikula\ContentModule\Helper\Base\AbstractPermissionHelper;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\GroupsModule\Constant as GroupsConstant;

/**
 * Permission helper implementation class.
 */
class PermissionHelper extends AbstractPermissionHelper
{
    /**
     * @var boolean
     */
    protected $inheritPermissions;

    /**
     * @inheritDoc
     */
    public function hasEntityPermission($entity, $permissionLevel, $userId = null)
    {
        $result = parent::hasEntityPermission($entity, $permissionLevel, $userId);

        $objectType = $entity->get_objectType();

        if (ACCESS_READ == $permissionLevel) {
            if ('page' == $objectType && 'approved' != $entity->getWorkflowState()) {
                if ($this->currentUserApi->get('uid') != $entity->getCreatedBy()->getUid()) {
                    return false;
                }
            }

            $scopes = $this->extractMultiList($entity->getScope());
            $userScopes = $this->getUserScopes();
            if (in_array(GroupsConstant::GROUP_ID_ADMIN, $userScopes)) {
                // always let admin access
                return true;
            }
            $hasScope = false;
            foreach ($scopes as $scope) {
                if (in_array($scope, $userScopes)) {
                    $hasScope = true;
                    break;
                }
            }
            $result = $hasScope;
        }

        if ('page' != $objectType) {
            return $result;
        }

        if (!$this->inheritPermissions) {
            return $result;
        }

        if ($result) {
            return true;
        }

        if (null !== $entity->getParent()) {
            return $this->hasEntityPermission($entity->getParent(), $permissionLevel, $userId);
        }

        return false;
    }

    /**
     * Checks if the content type with the given name may be read.
     *
     * @param PageEntity $entity
     * @param integer    $userId
     *
     * @return boolean
     */
    public function mayManagePageContent(PageEntity $entity, $userId = null)
    {
        $component = 'ZikulaContentModule:PageContent:';
        $instance = $entity->getKey() . '::';

        return $this->permissionApi->hasPermission($component, $instance, ACCESS_EDIT, $userId);
    }

    /**
     * Checks if the content type with the given name may be read.
     *
     * @param string  $name
     * @param integer $userId
     *
     * @return boolean
     */
    public function mayReadContentType($name, $userId = null)
    {
        $component = 'ZikulaContentModule:Plugin:Content';
        $instance = $name . '::';

        return $this->permissionApi->hasPermission($component, $instance, ACCESS_READ, $userId);
    }

    /**
     * @required
     * @param VariableApiInterface $variableApi
     */
    public function setInheritPermissions(VariableApiInterface $variableApi)
    {
        $this->inheritPermissions = $variableApi->get('ZikulaContentModule', 'inheritPermissions', false);
    }

    /**
     * Returns the allowed content item scopes for the current user.
     *
     * @return array
     */
    public function getUserScopes()
    {
        $scopes = [];
        $scopes[] = '0'; // public (all)

        $isLoggedIn = $this->currentUserApi->isLoggedIn();
        if ($isLoggedIn) {
            $scopes[] = '-1'; // logged in members
        } else {
            $scopes[] = '-2'; // not logged in people
        }

        // get user groups
        $groups = $this->currentUserApi->get('groups');
        foreach ($groups as $group) {
            $scopes[] = strval($group->getGid());
        }

        return $scopes;
    }

    /**
     * Extract concatenated multi selection.
     *
     * @param string $value The multi list value to process
     *
     * @return array List of single values
     */
    public function extractMultiList($value)
    {
        $listValues = explode('###', $value);
        $amountOfValues = count($listValues);
        if ($amountOfValues > 1 && $listValues[$amountOfValues - 1] == '') {
            unset($listValues[$amountOfValues - 1]);
        }
        if ($listValues[0] == '') {
            // use array_shift instead of unset for proper key reindexing
            // keys must start with 0, otherwise the dropdownlist form plugin gets confused
            array_shift($listValues);
        }
    
        return $listValues;
    }
}
