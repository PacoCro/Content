<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\Helper;

use Zikula\ContentModule\Entity\ContentItemEntity;
use Zikula\ContentModule\Entity\PageEntity;
use Zikula\ContentModule\Helper\Base\AbstractTranslatableHelper;

/**
 * Helper implementation class for translatable methods.
 */
class TranslatableHelper extends AbstractTranslatableHelper
{
    /**
     * @var ContentDisplayHelper
     */
    protected $displayHelper;

    /**
     * Returns information about which page elements are translatable.
     *
     * @param PageEntity $page
     * @param ContentItemEntity $contentItem
     * @return array
     */
    public function getTranslationInfo(PageEntity $page = null, ContentItemEntity $contentItem = null)
    {
        $result = [
            'items' => [],
            'currentContentId' => null,
            'previousContentId' => null,
            'nextContentId' => null
        ];
        $pageContentItems = $page->getContentItems();
        if (!count($pageContentItems)) {
            return $result;
        }

        $contentItems = [];
        foreach ($pageContentItems as $item) {
            $contentItems[] = $this->displayHelper->initContentType($item);
        }

        $currentIndex = -1;
        if (null !== $contentItem) {
            $i = 1;
            foreach ($contentItems as $contentType) {
                if ($contentItem->getId() == $contentType->getEntity()->getId()) {
                    $currentIndex = $i - 1;
                    break;
                }
            }
            $i++;
        }

        $result['items'] = $contentItems;

        $amountOfItems = count($contentItems);
        if (null !== $contentItem) {
            if ($currentIndex < $amountOfItems - 1) {
                $result['nextContentId'] = $contentItems[$currentIndex + 1]->getEntity()->getId();
            }
            if ($currentIndex > 0) {
                $result['previousContentId'] = $contentItems[$currentIndex - 1]->getEntity()->getId();
            }
        } else {
            if ($amountOfItems > 0) {
                $result['nextContentId'] = $contentItems[0]->getEntity()->getId();
            }
        }
        if ($currentIndex > -1) {
            $result['currentContentId'] = $contentItems[$currentIndex]->getEntity()->getId();
        }

        return $result;
    }

    /**
     * @param ContentDisplayHelper $displayHelper
     */
    public function setContentDisplayHelper(ContentDisplayHelper $displayHelper)
    {
        $this->displayHelper = $displayHelper;
    }
}
