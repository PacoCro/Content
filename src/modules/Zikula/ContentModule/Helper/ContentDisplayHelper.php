<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\Helper;

use RuntimeException;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerAwareTrait;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\ContentModule\Entity\ContentItemEntity;
use Zikula\ContentModule\ContentTypeInterface;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;
use Zikula\ThemeModule\Api\ApiInterface\PageAssetApiInterface;

/**
 * Helper class for displaying content items.
 */
class ContentDisplayHelper implements ContainerAwareInterface
{
    use ContainerAwareTrait;
    use TranslatorTrait;

    /**
     * @var PageAssetApiInterface
     */
    protected $pageAssetApi;

    /**
     * @var GroupRepositoryInterface
     */
    protected $groupRepository;

    /**
     * ContentDisplayHelper constructor.
     *
     * @param ContainerInterface       $container       Service container
     * @param TranslatorInterface      $translator      Translator service instance
     * @param PageAssetApiInterface    $pageAssetApi    AageAssetApi service instance
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(
        ContainerInterface $container,
        TranslatorInterface $translator,
        PageAssetApiInterface $pageAssetApi,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->setContainer($container);
        $this->setTranslator($translator);
        $this->pageAssetApi = $pageAssetApi;
        $this->groupRepository = $groupRepository;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(TranslatorInterface $translator)
    {
        $this->translator = $translator;
    }

    /**
     * Returns all required details for display view of a content item.
     *
     * @param ContentItemEntity $item
     *
     * @return array
     */
    public function getDetailsForDisplayView(ContentItemEntity $item)
    {
        $contentType = $this->initContentType($item);

        $assets = $contentType->getAssets(ContentTypeInterface::CONTEXT_VIEW);
        if (isset($assets['css']) && is_array($assets['css'])) {
            foreach ($assets['css'] as $path) {
                $this->pageAssetApi->add('stylesheet', $path);
            }
        }
        if (isset($assets['js']) && is_array($assets['js'])) {
            foreach ($assets['js'] as $path) {
                $this->pageAssetApi->add('javascript', $path);
            }
        }
        $jsEntryPoint = $contentType->getJsEntrypoint(ContentTypeInterface::CONTEXT_VIEW);
        if (null !== $jsEntryPoint) {
            $initScript = "
                <script>
                    (function($) {
                        $(document).ready(function() {
                            if ('function' === typeof " . $jsEntryPoint . ") {
                                " . $jsEntryPoint. "();
                            }
                        });
                    })(jQuery)
                </script>
            ";
            $this->pageAssetApi->add('footer', $initScript);
        }

        return $contentType->display(false);
    }

    /**
     * Returns all required details for editing view of a content item.
     *
     * @param ContentItemEntity $item
     *
     * @return array
     */
    public function getDetailsForDisplayEditing(ContentItemEntity $item)
    {
        $contentType = $this->initContentType($item);

        return [
            'title' => $this->getWidgetTitle($item, $contentType),
            'content' => $contentType->display(true),
            'panelClass' => $this->getWidgetPanelClass($item),
            'assets' => $contentType->getAssets(ContentTypeInterface::CONTEXT_VIEW),
            'jsEntryPoint' => $contentType->getJsEntrypoint(ContentTypeInterface::CONTEXT_VIEW)
        ];
    }

    /**
     * Initialises a content type instance for a given content item.
     *
     * @param ContentItemEntity $item
     *
     * @return ContentTypeInterface
     */
    public function initContentType(ContentItemEntity $item)
    {
        $contentTypeClass = $item->getOwningType();
        if (!class_exists($contentTypeClass) || !$this->container->has($contentTypeClass)) {
            throw new RuntimeException($this->__('Invalid content type received.'));
        }

        $contentType = $this->container->get($contentTypeClass);
        $contentType->setEntity($item);

        return $contentType;
    }

    /**
     * Returns the title for the widget of a given content item entity.
     *
     * @param ContentItemEntity $item
     * @param ContentTypeInterface $contentType
     *
     * @return string Widget title
     */
    public function getWidgetTitle(ContentItemEntity $item, ContentTypeInterface $contentType)
    {
        $icon = '<i class="fa fa-' . $contentType->getIcon() . '"></i>';
        $title = $contentType->getTitle();

        if (!$item->isCurrentlyActive()) {
            $title .= ' (' . $this->__('inactive') . ')';
        } elseif ('0' != $item->getScope()) {
            $scope = $item->getScope();
            if ('-1' == $scope) {
                $title .= ' (' . $this->__('only logged in members') . ')';
            } elseif ('-2' == $scope) {
                $title .= ' (' . $this->__('only not logged in people') . ')';
            } else {
                $groupId = intval($scope);
                $group = $this->groupRepository->find($groupId);
                if (null !== $group) {
                    $title .= ' (' . $this->__f('only %group', ['%group' => $group->getName()]) . ')';
                } else {
                    $title .= ' (' . $this->__('specific group') . ')';
                }
            }
        }

        return $icon . ' ' . $title;
    }

    /**
     * Returns the name of a bootstrap panel class for a given content item entity.
     *
     * @param ContentItemEntity $item
     *
     * @return string Widget panel class name
     */
    public function getWidgetPanelClass(ContentItemEntity $item)
    {
        $result = 'default';

        if (!$item->isCurrentlyActive()) {
            $result = 'danger';
        } elseif ('0' != $item->getScope()) {
            $scope = $item->getScope();
            if ('-1' == $scope) {
                $result = 'primary';
            } elseif ('-2' == $scope) {
                $result = 'success';
            } elseif ('1' == $scope || '2' == $scope) {
                $result = 'warning';
            } else {
                $result = 'info';
            }
        }

        return $result;
    }
}
