<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.3.2 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\Block\Form\Type;

use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\CategoriesModule\Entity\RepositoryInterface\CategoryRepositoryInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ContentModule\Block\Form\Type\Base\AbstractItemListBlockType;
use Zikula\ContentModule\Entity\Factory\EntityFactory;
use Zikula\ContentModule\Entity\PageEntity;
use Zikula\ContentModule\Form\DataTransformer\PageTransformer;
use Zikula\ContentModule\Form\Type\Field\EntityTreeType;
use Zikula\ContentModule\Helper\FeatureActivationHelper;

/**
 * List block form type implementation class.
 */
class ItemListBlockType extends AbstractItemListBlockType
{
    /**
     * @var EntityFactory
     */
    protected $entityFactory;

    /**
     * ItemListBlockType constructor.
     *
     * @param TranslatorInterface $translator Translator service instance
     * @param EntityFactory $entityFactory
     * @param CategoryRepositoryInterface $categoryRepository
     */
    public function __construct(
        TranslatorInterface $translator,
        EntityFactory $entityFactory,
        CategoryRepositoryInterface $categoryRepository
    ) {
        parent::__construct($translator, $categoryRepository);
        $this->entityFactory = $entityFactory;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder->add('root', EntityTreeType::class, [
            'class' => PageEntity::class,
            'multiple' => false,
            'expanded' => false,
            'use_joins' => false,
            'placeholder' => $this->__('All pages'),
            'required' => false,
            'label' => $this->__('Include the following subpages') . ':',
        ]);
        $transformer = new PageTransformer($this->entityFactory);
        $builder->get('root')->addModelTransformer($transformer);

        if ($options['feature_activation_helper']->isEnabled(FeatureActivationHelper::CATEGORIES, $options['object_type'])) {
            $this->addCategoriesField($builder, $options);
        }
        $this->addSortingField($builder, $options);
        $this->addAmountField($builder, $options);
        $builder->add('inMenu', CheckboxType::class, [
            'label' => $this->__('Use only pages activated for the menu') . ':',
            'required' => false
        ]);
        $this->addFilterField($builder, $options);
    }

    /**
     * @inheritDoc
     */
    public function addSortingField(FormBuilderInterface $builder, array $options = [])
    {
        $builder->add('sorting', ChoiceType::class, [
            'label' => $this->__('Sorting') . ':',
            'empty_data' => 'default',
            'choices' => [
                $this->__('Random') => 'random',
                $this->__('Newest') => 'newest',
                $this->__('Updated') => 'updated',
                $this->__('Views') => 'views',
                $this->__('Default') => 'default'
            ],
            'multiple' => false,
            'expanded' => false
        ]);
    }
}
